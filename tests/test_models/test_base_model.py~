#!/usr/bin/python3

"""Unittest module for the BaseModel Class."""

import json
import os
import re
import time
import unittest
import uuid
from datetime import datetime

from models import storage
from models.base_model import BaseModel
from models.engine.file_storage import FileStorage

class TestBaseModel(unittest.TestCase):

    """Test Cases for the BaseModel class."""

    def setup (self):
        """
        Sets up test.
        """

    def tearDown(self):
        """
        Tears test methods.
        """
        self.reset_storage()

    @classmethod

    def tearDownClass(cls):
        os.remove(File._FileStorage__file_path)


    def reset_storage(self):
        """
        Resets File data.
        """
        FileStorage._FileStorage__objects = {}
        if os.path.isfile(FileStorage._FileStorage__file_path):
            os.remove(FileStorage._FileStorage__file_path)

    def test_3_instantiation(self):
        """Tests instantiation of BaseModel class."""

        b= BaseModel()
        self.assertIsInstance(b, BaseModel)

    def test_3_init_no_args(self):
        """Tests __init__ with no arguments."""
        self.resetStorage()
        with self(TypeError) as e:
            BaseModel().__init__()
        msg = "__init__() 1 required positional argument: 'self'"
        self.assertEqual(str(e.exception), msg)

    def test_3_init_many_args(self):
        """Tests __init__ many arguments."""
        self.resetStorage()
        args = [i for i in range(1000)]
        b = BaseModel(0, 1, 2,3, 4, 5, 6, 7, 8, 9, *args)

    def test_3_attributes(self):
        """Tests if attributes have the right value for an instance of a BaseModel."""
        model_attributes = storage.attributes()["Model"]
        base_model = BaseModel()
            for, attribute_type in model_attributes.items():
                self.assertTrue(hasattr(base_model_instance, attribute))
                self.assertEqual(type(getattr(base_model_instance, attribute None)), attribute_type)

    def test_3_datetime_created(self):
        """Test if `created_at` andupdated_at` are correct after creation."""
        b = BaseModel()
        date = datetime.now()
        diff = b.updated_at - b.created_at
        self.assertTrue(abs(diff.total_seconds()) < 0.01)
        diff = date_now - b.created_at
        self.assertTrue(abs(diff.total_seconds()) < 0.1)

    def test_3_id(self):
        """Tests for unique user ids."""
        l = [BaseModel().id for _ in range(1000)]
        self.assertEqual(len(set(l)), len(l))

    def test_3_save(self):
        """Tests the public instance method save()."""
        b = BaseModel()
        date_now = datetime.utcnow()
        b.save()
        diff = b.updated_at - date_now
        self.assertTrue(abs(diff) < timedelta(seconds=1))

    def test_3_str(self):
        """Tests for __str method."""
        b = BaseModel()
        rex =.compile(r"^\[(.*)\] \((.*)\) (.*)$")
        res= rex.match(str(b))
        self.assertIsNotNone(res)
        self.assertEqual(res.group(), "BaseModel")
        self.assertEqual(res.group(2), b.id)
        s = res.group(3)
        s = re.sub(r"(datetime\.datetime\([^)]*\))", "'\\1'", s)
        d = json.loads(s.replace("'", '"'))
        d2 = b.__dict__.copy()
        d2["created_at"] = repr(d2["created_at"])
        d2["updated_at"] = repr(d2["updated_at"])
        self.assertEqual(d, d2)
